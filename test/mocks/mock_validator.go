// Code generated by MockGen. DO NOT EDIT.
// Source: test/interfaces/validator.go
//
// Generated by this command:
//
//	mockgen -source=test/interfaces/validator.go -destination=test/mocks/mock_validator.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/LerianStudio/lib-license-go/model"
	gomock "go.uber.org/mock/gomock"
)

// MockLicenseValidator is a mock of LicenseValidator interface.
type MockLicenseValidator struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseValidatorMockRecorder
	isgomock struct{}
}

// MockLicenseValidatorMockRecorder is the mock recorder for MockLicenseValidator.
type MockLicenseValidatorMockRecorder struct {
	mock *MockLicenseValidator
}

// NewMockLicenseValidator creates a new mock instance.
func NewMockLicenseValidator(ctrl *gomock.Controller) *MockLicenseValidator {
	mock := &MockLicenseValidator{ctrl: ctrl}
	mock.recorder = &MockLicenseValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenseValidator) EXPECT() *MockLicenseValidatorMockRecorder {
	return m.recorder
}

// ShutdownBackgroundRefresh mocks base method.
func (m *MockLicenseValidator) ShutdownBackgroundRefresh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutdownBackgroundRefresh")
}

// ShutdownBackgroundRefresh indicates an expected call of ShutdownBackgroundRefresh.
func (mr *MockLicenseValidatorMockRecorder) ShutdownBackgroundRefresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownBackgroundRefresh", reflect.TypeOf((*MockLicenseValidator)(nil).ShutdownBackgroundRefresh))
}

// StartBackgroundRefresh mocks base method.
func (m *MockLicenseValidator) StartBackgroundRefresh(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartBackgroundRefresh", ctx)
}

// StartBackgroundRefresh indicates an expected call of StartBackgroundRefresh.
func (mr *MockLicenseValidatorMockRecorder) StartBackgroundRefresh(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBackgroundRefresh", reflect.TypeOf((*MockLicenseValidator)(nil).StartBackgroundRefresh), ctx)
}

// Validate mocks base method.
func (m *MockLicenseValidator) Validate(ctx context.Context) (model.ValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx)
	ret0, _ := ret[0].(model.ValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockLicenseValidatorMockRecorder) Validate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockLicenseValidator)(nil).Validate), ctx)
}
